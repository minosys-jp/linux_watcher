/********* Sample code generated by the curl command line tool **********
 * All curl_easy_setopt() options are documented at:
 * https://curl.haxx.se/libcurl/c/curl_easy_setopt.html
 ************************************************************************/
#include <cstdlib>
#include "algorithms.h"
#include <curl/curl.h>

using namespace std;
using json = nlohmann::json;

static size_t writecb(char *b, size_t len, size_t nmemb, void *up) {
    size_t realsize = len * nmemb;
    string *res = (string *)up;
    res->append(string(b, realsize));
    return realsize;
}

bool upload_server(const Property &properties, const json &v, json &vres)
{
  CURLcode ret;
  CURL *hnd;
  struct curl_slist *slist1;
  string js(v.dump());
  Property::const_iterator iservername = properties.find("servername");
  if (iservername == properties.cend()) {
      fprintf(stderr, "servername key not found\n");
      return false;
  }
  // Option: serverhost
  Property::const_iterator iserverhost = properties.find("serverhost");

  // NOTE: only ASCII characters accepted for URL
  const string serverhost(iservername->second);
  slist1 = NULL;
  slist1 = curl_slist_append(slist1, "Content-Type: application/json; charset='utf-8'");
  slist1 = curl_slist_append(slist1, "Accept: application/json");
  if (iserverhost != properties.cend()) {
      string h("Host: ");
      h += iserverhost->second;
      curl_slist_append(slist1, h.c_str());
  }

  hnd = curl_easy_init();
  curl_easy_setopt(hnd, CURLOPT_BUFFERSIZE, 102400L);
  curl_easy_setopt(hnd, CURLOPT_URL, serverhost.c_str());
  curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);
  curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, js.data());
  curl_easy_setopt(hnd, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)js.length());
  curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, slist1);
  curl_easy_setopt(hnd, CURLOPT_USERAGENT, "curl/7.68.0");
  curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, 50L);
  curl_easy_setopt(hnd, CURLOPT_HTTP_VERSION, (long)CURL_HTTP_VERSION_2TLS);
  curl_easy_setopt(hnd, CURLOPT_SSH_KNOWNHOSTS, "/home/minos/.ssh/known_hosts");
  curl_easy_setopt(hnd, CURLOPT_FTP_SKIP_PASV_IP, 1L);
  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);

  /* Here is a list of options the curl code used that cannot get generated
     as source easily. You may select to either not use them or implement
     them yourself.

  CURLOPT_WRITEDATA set to a objectpointer
  CURLOPT_INTERLEAVEDATA set to a objectpointer
  CURLOPT_WRITEFUNCTION set to a functionpointer
  CURLOPT_READDATA set to a objectpointer
  CURLOPT_READFUNCTION set to a functionpointer
  CURLOPT_SEEKDATA set to a objectpointer
  CURLOPT_SEEKFUNCTION set to a functionpointer
  CURLOPT_ERRORBUFFER set to a objectpointer
  CURLOPT_STDERR set to a objectpointer
  CURLOPT_HEADERFUNCTION set to a functionpointer
  CURLOPT_HEADERDATA set to a objectpointer

  */
  string response;
  curl_easy_setopt(hnd, CURLOPT_WRITEFUNCTION, writecb);
  curl_easy_setopt(hnd, CURLOPT_WRITEDATA, (void *)&response);

  ret = curl_easy_perform(hnd);

  curl_easy_cleanup(hnd);
  hnd = NULL;
  curl_slist_free_all(slist1);
  slist1 = NULL;

  if (!response.empty()) {
      // return JSON if any
      vres = json::parse(response);
  }
  return ret == 0;
}
/**** End of sample code ****/
